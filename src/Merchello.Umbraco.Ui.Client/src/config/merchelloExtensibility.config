<merchelloExtensibility>

    <backOffice>

        <trees>
            <!-- 1.11.0 adds default attributes localizeArea and localizeName with respective values of merchelloTree and the id att value e.g. products, sales, etc. -->
            <tree id="products" title="Products" icon="icon-barcode" routePath="merchello/merchello/productlist/manage" visible="true" sortOrder="1" />
            <tree id="sales" title="Sales" icon="icon-receipt-dollar" routePath="merchello/merchello/saleslist/manage" visible="true" sortOrder="2">

                <!--
                        Sets the order where self managed entity collection providers (like Unpaid invoices) are listed in the tree.
                        If set to true, the resolved collections will be listed before the user defined collections.  False will list them
                        after.
                    -->
                <selfManagedProvidersBeforeStaticProviders>true</selfManagedProvidersBeforeStaticProviders>

                <selfManagedEntityCollectionProviders>
                    <!--
                            attribute: key - the provider key defined in the EntityCollectionProviderAttribute decorating the EntityCollectionProvider
                            attribute: icon - is the icon displayed in the tree
                            attribute: visible - indicates whether or not the collection should provider should create a tree node
                            attribute: ref - not actually used, it is only here so that they can be managed more easily
                           -->
                    <entityCollectionProvider key="A8120A01-E9BF-4204-ADDD-D9553F6F24FE" icon="icon-bills" visible="true" ref="Unpaid invoices" />
                    <entityCollectionProvider key="82015B97-11E8-4E57-8258-A59E1D378E04" icon="icon-bills" visible="true" ref="Partially paid invoices" />
                    <entityCollectionProvider key="072E0671-31BE-41E4-8CF9-4AEEC6CC5BC6" icon="icon-bills" visible="true" ref="Paid invoices" />
                    <entityCollectionProvider key="5FD6E5EB-0B7C-41A4-B863-7AEC31BE84C0" icon="icon-truck" visible="true" ref="Unfulfilled orders" />
                    <entityCollectionProvider key="A9A288F3-DA98-4712-9E90-F9F909F2C26A" icon="icon-truck" visible="true" ref="Open orders" />
                    <entityCollectionProvider key="68B57648-7550-4702-8223-C5574B7C0604" icon="icon-truck" visible="true" ref="Fulfilled orders" />
                </selfManagedEntityCollectionProviders>
            </tree>
            <tree id="customers" title="Customers" icon="icon-user-glasses" routePath="merchello/merchello/customerlist/manage" visible="true" sortOrder="3" />
            <tree id="marketing" title="Marketing" icon="icon-energy-saving-bulb" routePath="merchello/merchello/offerslist/manage" visible="true" sortOrder="4" />
            <tree id="reports" title="Reports" icon="icon-slideshow" routePath="merchello/merchello/reportsdashboard/manage" visible="true" sortOrder="5" />
            <tree id="gateways" title="Gateway Providers" icon="icon-settings" routePath="merchello/merchello/gatewayproviderlist/manage" visible="true" sortOrder="6" />
        </trees>

        <!--
        This setting allows the implementer to specify what HTML element should be used when selecting option choices
        in the back office.  This requires custom razor coding in your templates and it not implemented in any of the Merchello starter kits.
        -->
        <enableProductOptionUiElementSelection>false</enableProductOptionUiElementSelection>

        <productOptionUi>
            <setting alias="Select List" value="select" />
            <setting alias="Radio Buttons" value="radio" />
        </productOptionUi>

    </backOffice>

    <pluggable>
        <object alias="CustomerContext" type="Merchello.Web.CustomerContext, Merchello.Web" />
        <object alias="BasketCheckoutCustomerManager" type="Merchello.Web.CheckoutManagers.BasketCheckoutCustomerManager, Merchello.Web" />
        <object alias="BasketCheckoutOfferManager" type="Merchello.Web.CheckoutManagers.BasketCheckoutOfferManager, Merchello.Web" />
        <object alias="BasketCheckoutShippingManager" type="Merchello.Web.CheckoutManagers.BasketCheckoutShippingManager, Merchello.Web" />
        <object alias="BasketCheckoutExtendedManager" type="Merchello.Web.CheckoutManagers.BasketCheckoutExtendedManager, Merchello.Web" />
        <object alias="BasketCheckoutPaymentManager" type="Merchello.Web.CheckoutManagers.BasketCheckoutPaymentManager, Merchello.Web" />
        <object alias="RemoteLogger" type="Merchello.Web.Logging.DefaultEmptyRemoteLogger, Merchello.Web" />
        <object alias="PluginViewEditorProvider" type="Merchello.Web.Pluggable.PluginViewEditorProvider, Merchello.Web" />
    </pluggable>

    <strategies>
        <strategy alias="DefaultPackaging" type="Merchello.Core.Strategies.Packaging.DefaultWarehousePackagingStrategy, Merchello.Core" />
        <strategy alias="DefaultShipmentRateQuote" type="Merchello.Core.Gateways.Shipping.DefaultShipmentRateQuoteStrategy, Merchello.Core" />
        <strategy alias="DefaultInvoiceTaxRateQuote" type="Merchello.Core.Gateways.Taxation.FixedRate.FixedRateTaxCalculationStrategy, Merchello.Core" />
        <strategy alias="DefaultAnonymousBasketConversionStrategy" type="Merchello.Web.Workflow.BasketConversionByDiscardingPreviousCustomerBasket, Merchello.Web" />
        <!--strategy alias="DefaultAnonymousBasketConversionStrategy" type="Merchello.Web.Workflow.BasketConversionByCombiningAnonymousBasket, Merchello.Web" /-->
    </strategies>

    <taskChains>
        <taskChain alias="CheckoutManagerInvoiceCreate">
            <tasks>
                <task type="Merchello.Core.Chains.InvoiceCreation.CheckoutManager.AddBillingInfoToInvoiceTask, Merchello.Core" />
                <task type="Merchello.Core.Chains.InvoiceCreation.CheckoutManager.ConvertItemCacheItemsToInvoiceItemsTask, Merchello.Core" />
                <task type="Merchello.Web.Workflow.InvoiceCreation.CheckoutManager.AddCouponDiscountsToInvoiceTask, Merchello.Web" />
                <task type="Merchello.Core.Chains.InvoiceCreation.CheckoutManager.ApplyTaxesToInvoiceTask, Merchello.Core" />
                <task type="Merchello.Core.Chains.InvoiceCreation.CheckoutManager.ValidateCommonCurrency, Merchello.Core" />
                <task type="Merchello.Core.Chains.InvoiceCreation.CheckoutManager.AddInvoiceNumberPrefixTask, Merchello.Core" />
                <task type="Merchello.Web.Workflow.InvoiceCreation.CheckoutManager.AddNotesToInvoiceTask, Merchello.Web" />
            </tasks>
        </taskChain>
        <taskChain alias="OrderPreparationOrderCreate">
            <tasks>
                <task type="Merchello.Core.Chains.OrderCreation.ConvertInvoiceItemsToOrderItemsTask, Merchello.Core" />
            </tasks>
        </taskChain>
        <taskChain alias="OrderPreparationShipmentCreate">
            <tasks>
                <task type="Merchello.Core.Chains.ShipmentCreation.AddShippableOrderLineItemsToShipmentTask, Merchello.Core" />
                <task type="Merchello.Core.Chains.ShipmentCreation.RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask, Merchello.Core" />
                <task type="Merchello.Core.Chains.ShipmentCreation.SetOrderStatusTask, Merchello.Core" />
            </tasks>
        </taskChain>
        <!--
           Used to modify persisted data before returning to the UI
           -->
        <taskChain alias="MerchelloHelperProductDataModifiers">
            <tasks>
                <task type="Merchello.Web.DataModifiers.Product.IncludeTaxInProductPriceDataModifierTask, Merchello.Web" />
            </tasks>
        </taskChain>
        <taskChain alias="ItemCacheValidation">
            <!-- Added Merchello Version 1.11.0
            This chain validates basket and wish list items against values in the back office to assert that the customer has not
            added items to their basket that were subsequently changed in the back office prior to checkout.  The process is needed
            as the relation between the basket and wish list items are decoupled from the actual persisted values.
            -->
            <tasks>
                <task type="Merchello.Web.Validation.Tasks.ValidateProductsExistTask, Merchello.Web" />
                <!--
                        The following task is intended to assert that pricing and/or on sale value has not changed in the back office since the
                        customer has placed an item into their basket or wish list. If you have made custom pricing modifications in your
                        implementation, you may either remove this task or adjust your code to add a new extended data value
                        merchLineItemAllowsValidation = false
                        to the line item so that it is skipped in the validation process.
                    -->
                <task type="Merchello.Web.Validation.Tasks.ValidateProductPriceTask, Merchello.Web" />
                <!--
                        Validates that products are still in inventory
                    -->
                <task type="Merchello.Web.Validation.Tasks.ValidateProductInventoryTask, Merchello.Web" />
            </tasks>
        </taskChain>
        <taskChain alias="CopyProduct">
            <tasks>
                <task type="Merchello.Core.Chains.CopyEntity.Product.CopyProductOptionsTask, Merchello.Core" />
                <!-- we have to save here to generate the variants -->
                <task type="Merchello.Core.Chains.CopyEntity.Product.SaveProductCopyTask, Merchello.Core" />
                <task type="Merchello.Core.Chains.CopyEntity.Product.AddProductToWarehouseCatalogsTask, Merchello.Core" />
                <task type="Merchello.Core.Chains.CopyEntity.Product.MapProductVariantDataTask, Merchello.Core" />
                <task type="Merchello.Core.Chains.CopyEntity.Product.CopyProductCollectionsTask, Merchello.Core" />
                <task type="Merchello.Core.Chains.CopyEntity.Product.CopyDetachedContentTask, Merchello.Core" />
            </tasks>
        </taskChain>
    </taskChains>

    <typeFieldDefinitions>
        <lineItem>
            <type alias="CcFee" descriptiveName="Fee applied to invoices for credit card charges" typeKey="676A3E0D-AC88-4D61-850A-403E8C359FDE" />
        </lineItem>
        <!--
        <itemCache>
          <type alias="WeddingRegistry" descriptiveName="Wedding Registry" typeKey="64F43CDF-6313-4B45-AE39-C32646F37041" />
        </itemCache>
        <product />

        -->
    </typeFieldDefinitions>

</merchelloExtensibility>